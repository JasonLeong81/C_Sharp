- WCF in single components in VS installer 
- What is assembly in C#?
	- An assembly contains compiled code (usually in the form of .NET Intermediate
		Language (IL)) and metadata that describes the code.
	- Typically has the file extension .exe or .dll (dynamic link library)
	- An assembly contains one or more modules, each containing IL code and metadata. 
		- IL code is stored in portable executable (PE) file, which can be executed by CLR or loaded into another process as a library. 
	- Assemblies allow us to divide our code into logical units (ie class libraries) that can be reused by multiple applications.
	- Create an assembly using the 'csc' compiler or use an IDE like VS
	- Assembly cache:
		- Private and global assembly cache (when an assembly is needed for multiple projects)
	- Types of assembly:
		- Process assembly: has .exe files
		- Library assembly: has .dll files 
			- Private assembly 
				- To use the functions here, we must copy it separately into each application folder where we want to use it 
				- Copy functions only to BIN folder of each application folder, one strict requirement of private assembly
			- Share assembly (aka public assembly)
				- Only one copy is needed, no copy needed

	- An assembly is a single unit of deployment
	- Assemlies can be single file (stored in just one file, easier to deal with) or multi-file (stored in multiple files)
	- A private assembly is used by a single application, and is stored in that application's installation directory. A private assembly is only accessible to the application that uses it, and is not intended to be shared with other applications.
	- A shared assembly is stored in a global location and can be used by multiple applications. Shared assemblies are usually deployed to the global assembly cache (GAC), which is a special directory for shared assemblies. Shared assemblies are intended to be shared by multiple applications, and are typically deployed as part of a software library or framework.
	- In general, private assemblies are used for application-specific code, while shared assemblies are used for code that is intended to be shared by multiple applications.
	- 


- 'internal' access modifier  
	- "internal" keyword is used to specify that a member (such as a field, method, or property) is accessible only within the same assembly.
	- 